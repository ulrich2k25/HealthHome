// ========================
// IMPORTATION DES MODULES
// ========================

// Express = framework pour cr√©er des routes HTTP (comme /api/export)
const express = require('express');

// MySQL2 = permet de se connecter √† ta base de donn√©es MySQL
const mysql = require('mysql2');

// json2csv = transforme les donn√©es JSON en fichier CSV
const { Parser } = require('json2csv');

// pdfkit = permet de cr√©er un fichier PDF depuis du texte
const PDFDocument = require('pdfkit');

// On cr√©e un "router" Express : il contiendra toutes les routes d'export
const router = express.Router();


// ========================
// CONNEXION √Ä TA BASE DE DONN√âES MYSQL
// ========================

const db = mysql.createConnection({
  host: 'localhost',     // ton serveur local (WAMP)
  user: 'root',          // ton utilisateur MySQL
  password: 'Idrelle-21',// ton mot de passe MySQL
  database: 'software',  // ta base de donn√©es
});


// ========================
// ROUTE : EXPORT CSV
// ========================

/*
  ‚û§ Cette route permet d'exporter les donn√©es d'un SEUL utilisateur
  sous format CSV.
  Exemple : http://localhost:4000/api/export/csv?id=8
*/
router.get('/export/csv', (req, res) => {
  // On r√©cup√®re l'ID du patient depuis l'URL : ?id=8
  const userId = req.query.id;

  // Si l'ID est manquant, on renvoie une erreur
  if (!userId) return res.status(400).send('ID utilisateur manquant.');

  // Requ√™te SQL : on r√©cup√®re SEULEMENT les infos du bon utilisateur
  const query = 'SELECT vorname, nachname, email, created_at, verified FROM users WHERE id = ?';

  // On ex√©cute la requ√™te MySQL
  db.query(query, [userId], (err, results) => {
    // En cas d‚Äôerreur de base de donn√©es
    if (err) {
      console.error('Erreur MySQL :', err);
      return res.status(500).send('Erreur de base de donn√©es.');
    }

    // Si aucun utilisateur trouv√© (ex : ID inexistant)
    if (results.length === 0) {
      return res.status(404).send('Utilisateur non trouv√©.');
    }

    // On convertit les donn√©es SQL en CSV avec json2csv
    const parser = new Parser();
    const csv = parser.parse(results);

    // On indique au navigateur que la r√©ponse est un fichier CSV
    res.header('Content-Type', 'text/csv');
    res.attachment(`mes_donnees_utilisateur_${userId}.csv`);

    // On envoie le fichier au navigateur pour t√©l√©chargement
    res.send(csv);
  });
});


// ========================
// ROUTE : EXPORT PDF
// ========================

/*
  ‚û§ M√™me principe, mais cette fois on g√©n√®re un PDF au lieu d‚Äôun CSV.
  Exemple : http://localhost:4000/api/export/pdf?id=8
*/
router.get('/export/pdf', (req, res) => {
  // R√©cup√©ration de l'ID du patient depuis l‚ÄôURL
  const userId = req.query.id;

  // Si aucun ID n‚Äôest fourni ‚Üí message d‚Äôerreur
  if (!userId) return res.status(400).send('ID utilisateur manquant.');

  // Requ√™te SQL : on s√©lectionne les colonnes utiles du bon utilisateur
  const query = 'SELECT vorname, nachname, email, created_at, verified FROM users WHERE id = ?';

  // On ex√©cute la requ√™te MySQL
  db.query(query, [userId], (err, results) => {
    if (err) {
      console.error('Erreur MySQL :', err);
      return res.status(500).send('Erreur de base de donn√©es.');
    }

    // Si aucun utilisateur trouv√©
    if (results.length === 0) {
      return res.status(404).send('Utilisateur non trouv√©.');
    }

    // On r√©cup√®re le premier (et seul) utilisateur trouv√©
    const user = results[0];

    // Cr√©ation du document PDF
    const doc = new PDFDocument();

    // On pr√©pare la r√©ponse HTTP
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=mes_donnees_${user.vorname}.pdf`);

    // On envoie le PDF directement au navigateur
    doc.pipe(res);

    // === CONTENU DU PDF ===
    doc.fontSize(18).text('Mes donn√©es personnelles HealthHome', { align: 'center' });
    doc.moveDown(2);

    doc.fontSize(12).text(`Pr√©nom : ${user.vorname}`);
    doc.text(`Nom : ${user.nachname}`);
    doc.text(`Email : ${user.email}`);
    doc.text(`Compte cr√©√© le : ${user.created_at}`);
    doc.text(`Compte v√©rifi√© : ${user.verified ? 'Oui' : 'Non'}`);
    doc.moveDown(2);
    doc.text('Merci d‚Äôutiliser HealthHome üíö', { align: 'center' });

    // On termine et envoie le PDF
    doc.end();
  });
});


// ========================
// EXPORT DU ROUTER
// ========================

// Cette ligne rend les routes accessibles depuis index.js
module.exports = router;
