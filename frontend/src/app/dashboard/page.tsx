"use client"; // Indique que cette page est interactive (React c√¥t√© client)
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";

// üìä Importation de composants graphiques (Recharts)
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
} from "recharts";

// ==========================
// üíì Donn√©es fictives du graphique (BPM = battements par minute)
// ==========================
const mock = [
  { day: "Lun", bpm: 72 },
  { day: "Mar", bpm: 75 },
  { day: "Mer", bpm: 70 },
  { day: "Jeu", bpm: 78 },
  { day: "Ven", bpm: 74 },
  { day: "Sam", bpm: 76 },
  { day: "Dim", bpm: 73 },
];

// ==========================
// üß† Composant principal : Dashboard
// ==========================
export default function Dashboard() {
  const [data, setData] = useState(mock); // Donn√©es pour le graphique
  const [isAuthorized, setIsAuthorized] = useState(false); // V√©rifie si connect√©
  const [checkingAuth, setCheckingAuth] = useState(true); // Montre "chargement" pendant v√©rification
  const router = useRouter();

  // ==========================
  // üß© V√©rifie si un token existe dans le localStorage
  // ==========================
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      // Si pas de token ‚Üí retour √† la page de login
      router.push("/login");
    } else {
      // Sinon ‚Üí autorise l‚Äôacc√®s
      setIsAuthorized(true);
    }
    setCheckingAuth(false); // On arr√™te l‚Äô√©tat "chargement"
  }, [router]);

  // ==========================
  // üìà Charge les donn√©es du graphique
  // ==========================
  useEffect(() => {
    setData(mock); // Ici tu pourrais plus tard charger des vraies donn√©es depuis le backend
  }, []);

  // ==========================
  // üö™ D√©connexion
  // ==========================
  const handleLogout = () => {
    localStorage.removeItem("token"); // Supprime le token
    localStorage.removeItem("userId"); // Supprime aussi l‚ÄôID utilisateur
    router.push("/login"); // Retourne √† la page de connexion
  };

  // ==========================
  // ‚è≥ Affiche un √©cran de chargement pendant la v√©rification
  // ==========================
  if (checkingAuth) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-900 text-white">
        <p>V√©rification de la connexion...</p>
      </div>
    );
  }

  // Si non autoris√© ‚Üí on ne montre rien
  if (!isAuthorized) {
    return null;
  }

  // =======================================================
  // ‚úÖ Si connect√© : affichage complet du tableau de bord
  // =======================================================
  return (
    <div className="space-y-6">
      {/* === BOUTON DE D√âCONNEXION === */}
      <div className="flex justify-end">
        <button
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg"
        >
          Abmelden
        </button>
      </div>

      {/* === PETITS CARTONS DE STATISTIQUES === */}
      <div className="grid md:grid-cols-4 gap-4">
        <div className="bg-gray-900 border border-gray-800 rounded-2xl p-4">
          <div className="text-sm text-gray-400">BPM</div>
          <div className="text-3xl font-bold">74</div>
        </div>
        <div className="bg-gray-900 border border-gray-800 rounded-2xl p-4">
          <div className="text-sm text-gray-400">Blutdruck</div>
          <div className="text-3xl font-bold">122/79</div>
        </div>
        <div className="bg-gray-900 border border-gray-800 rounded-2xl p-4">
          <div className="text-sm text-gray-400">Schlaf</div>
          <div className="text-3xl font-bold">7,2 h</div>
        </div>
        <div className="bg-gray-900 border border-gray-800 rounded-2xl p-4">
          <div className="text-sm text-gray-400">Kalorien</div>
          <div className="text-3xl font-bold">1 950</div>
        </div>
      </div>

      {/* === GRAPHIQUE BPM === */}
      <div className="bg-gray-900 border border-gray-800 rounded-2xl p-4 h-64">
        <h3 className="text-sm text-gray-400 mb-2">Herzfrequenz (BPM)</h3>
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={data}>
            <XAxis dataKey="day" />
            <YAxis />
            <Tooltip />
            <Line
              type="monotone"
              dataKey="bpm"
              stroke="#22c55e"
              strokeWidth={2}
              dot={false}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>

      {/* ====================================================== */}
      {/* üìÑ SECTION POUR T√âL√âCHARGER LES DONN√âES DU PATIENT */}
      {/* ====================================================== */}
      <DownloadSection />
    </div>
  );
}

// ==========================================================
// üì¶ Composant s√©par√© : DownloadSection
// Ce composant g√®re tout ce qui concerne l‚Äôexport et l‚Äôenvoi des donn√©es patient
// ==========================================================
function DownloadSection() {
  // üß† userId : l'identifiant unique du patient connect√©
  // on le r√©cup√®re depuis le navigateur (localStorage)
  const [userId, setUserId] = useState<number | null>(null);

  // üéõÔ∏è showExportBox : sert √† afficher ou cacher la petite fen√™tre "Choisir PDF / CSV"
  const [showExportBox, setShowExportBox] = useState(false);

  // üéõÔ∏è showMailBox : sert √† afficher ou cacher la petite fen√™tre "envoyer par mail"
  const [showMailBox, setShowMailBox] = useState(false);

  // üìß doctorEmail : contient le texte entr√© par l‚Äôutilisateur dans le champ e-mail
  const [doctorEmail, setDoctorEmail] = useState("");

  // üîÅ Ce useEffect s‚Äôex√©cute UNE FOIS au chargement du composant
  useEffect(() => {
    // on regarde dans le stockage local si un ID utilisateur est enregistr√©
    const storedId = localStorage.getItem("userId");
    // si oui, on le convertit en nombre et on le stocke dans userId
    if (storedId) {
      setUserId(Number(storedId));
    }
  }, []); // tableau vide = ne s‚Äôex√©cute qu‚Äôune seule fois (au montage du composant)

  // =========================
  // üìÑ Fonction pour t√©l√©charger le PDF
  // =========================
  const downloadPDF = async () => {
    // si aucun ID utilisateur, on arr√™te tout
    if (!userId) return alert("User ID not found!");

    try {
      // on appelle notre backend via une requ√™te HTTP GET
      const response = await fetch(`http://localhost:4000/api/export/pdf?id=${userId}`);

      // si le serveur ne renvoie pas de succ√®s (ex: erreur 404 ou 500)
      if (!response.ok) return alert("Error while downloading PDF.");

      // la r√©ponse est un fichier ‚Üí on la transforme en "blob" (fichier brut)
      const blob = await response.blob();

      // on cr√©e une URL temporaire pour ce fichier (le navigateur la comprend)
      const url = window.URL.createObjectURL(blob);

      // on cr√©e un lien <a> temporaire dans le document
      const link = document.createElement("a");
      // ce lien pointe vers le fichier qu'on vient de cr√©er
      link.href = url;
      // on indique le nom du fichier √† t√©l√©charger
      link.setAttribute("download", `HealthData_${userId}.pdf`);

      // on ajoute ce lien dans le corps de la page (temporairement)
      document.body.appendChild(link);
      // on simule un clic sur ce lien ‚Üí √ßa t√©l√©charge le fichier
      link.click();
      // on enl√®ve le lien pour nettoyer le DOM
      link.remove();

      // une fois termin√©, on referme la fen√™tre "choix format"
      setShowExportBox(false);
    } catch (err) {
      console.error(err);
      alert("Error generating PDF.");
    }
  };

  // =========================
  // üìä Fonction pour t√©l√©charger le CSV
  // =========================
  const downloadCSV = async () => {
    if (!userId) return alert("User ID not found!");
    try {
      // m√™me principe que pour le PDF, mais cette fois l‚ÄôURL vise /csv
      const response = await fetch(`http://localhost:4000/api/export/csv?id=${userId}`);
      if (!response.ok) return alert("Error while downloading CSV.");

      // conversion de la r√©ponse en fichier brut
      const blob = await response.blob();
      // cr√©ation d'une URL temporaire pour le navigateur
      const url = window.URL.createObjectURL(blob);
      // cr√©ation d'un lien temporaire <a>
      const link = document.createElement("a");
      // assignation de cette URL au lien
      link.href = url;
      // d√©finition du nom du fichier √† t√©l√©charger
      link.setAttribute("download", `HealthData_${userId}.csv`);
      // ajout du lien √† la page
      document.body.appendChild(link);
      // clic simul√©
      link.click();
      // suppression du lien
      link.remove();

      setShowExportBox(false);
    } catch (err) {
      console.error(err);
      alert("Error generating CSV.");
    }
  };

  // =========================
  // üìß Fonction pour envoyer le fichier par mail au m√©decin
  // =========================
  const sendMailToDoctor = async () => {
    // v√©rifie que l‚Äôutilisateur est connect√©
    if (!userId) return alert("User ID not found!");
    // v√©rifie qu‚Äôun e-mail a bien √©t√© saisi
    if (!doctorEmail) return alert("Please enter doctor email.");

    try {
      // envoie une requ√™te POST vers le backend
      // (on la cr√©era ensuite dans exportRoutes.js)
      const res = await fetch("http://localhost:4000/api/export/send-email", {
        method: "POST", // m√©thode HTTP
        headers: { "Content-Type": "application/json" }, // on envoie du JSON
        body: JSON.stringify({
          userId: userId, // ID du patient
          email: doctorEmail, // email du m√©decin
        }),
      });

      // si le backend r√©pond avec une erreur
      if (!res.ok) {
        return alert("Error while sending email.");
      }

      // si tout va bien
      alert("Email sent to doctor ‚úÖ");
      // on ferme la bo√Æte d‚Äôenvoi de mail
      setShowMailBox(false);
      // on vide le champ email
      setDoctorEmail("");
    } catch (err) {
      console.error(err);
      alert("Server error while sending email.");
    }
  };

  // =========================
  // üñºÔ∏è AFFICHAGE (le rendu visuel)
  // =========================
  return (
    <div className="mt-6">
      {/* --- Ligne principale avec les deux boutons --- */}
      <div className="flex gap-4">
        {/* 1Ô∏è‚É£ Bouton principal : DATENEXPORT */}
        <button
          // quand on clique, on ouvre ou ferme la bo√Æte PDF/CSV
          onClick={() => {
    setShowExportBox((prev) => !prev); // ouvre/ferme la bo√Æte PDF-CSV
    setShowMailBox(false); // üî∏ ferme la bo√Æte email si elle est ouverte
  }}
          className="bg-white text-gray-900 px-6 py-3 rounded-lg shadow-md border border-gray-200 hover:bg-gray-50 transition flex items-center gap-2"
        >
          {/* petit emoji document pour le style */}
          üìÑ <span>Datenexport</span>
        </button>

        {/* 2Ô∏è‚É£ Bouton : Per E-Mail an Arzt senden */}
        <button
          // quand on clique, on ouvre la bo√Æte d‚Äôenvoi mail
          onClick={() => {
    setShowMailBox((prev) => !prev); // ouvre/ferme la bo√Æte email
    setShowExportBox(false); // üî∏ ferme la bo√Æte export si elle est ouverte
  }}
          className="bg-slate-900 text-white px-6 py-3 rounded-lg shadow-md hover:bg-slate-800 transition flex items-center gap-2"
        >
          ‚úâÔ∏è <span>Per E-Mail an Arzt senden</span>
        </button>
      </div>

      {/* --- Si showExportBox = true ‚Üí affiche la petite bo√Æte blanche --- */}
      {showExportBox && (
        <div className="mt-4 bg-white border border-gray-200 rounded-lg shadow-lg p-4 w-full max-w-sm">
          <p className="text-gray-700 font-semibold mb-3">
            W√§hle ein Format:
          </p>

          {/* boutons PDF et CSV dans la petite bo√Æte */}
          <div className="flex gap-3">
            <button
              onClick={downloadPDF}
              className="flex-1 bg-red-500 hover:bg-red-600 text-white py-2 rounded-lg"
            >
              PDF
            </button>
            <button
              onClick={downloadCSV}
              className="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg"
            >
              CSV
            </button>
          </div>
          <div className="flex gap-3 mb-3">
  <button onClick={downloadPDF}>PDF</button>
  <button onClick={downloadCSV}>CSV</button>
</div>

{/* üî∏ AJOUT : bouton pour fermer la bo√Æte sans rien faire */}
<button
  onClick={() => setShowExportBox(false)}
  className="w-full border border-gray-300 rounded-lg py-2 hover:bg-gray-50 transition"
>
  Abbrechen
</button>

        </div>
      )}

      {/* --- Si showMailBox = true ‚Üí affiche la bo√Æte d‚Äôenvoi mail --- */}
      {showMailBox && (
        <div className="mt-4 bg-white border border-gray-200 rounded-lg shadow-lg p-4 w-full max-w-sm">
          <p className="text-gray-700 font-semibold mb-3">
            E-Mail des Arztes eingeben:
          </p>

          {/* champ texte pour entrer l'adresse email */}
          <input
            type="email"
            value={doctorEmail}
            onChange={(e) => setDoctorEmail(e.target.value)}
            placeholder="arzt@example.de"
            className="w-full border border-gray-300 rounded-lg px-3 py-2 mb-3"
          />

          {/* boutons pour annuler ou envoyer */}
          <div className="flex gap-3 justify-end">
  {/* üî∏ AJOUT : ferme la box mail quand on clique sur Abbrechen */}
  <button
    onClick={() => setShowMailBox(false)}
    className="px-4 py-2 rounded-lg border hover:bg-gray-50 transition"
  >
    Abbrechen
  </button>

  <button
    onClick={sendMailToDoctor}
    className="px-4 py-2 rounded-lg bg-slate-900 text-white hover:bg-slate-800 transition"
  >
    Senden
  </button>
</div>
        </div>
      )}
    </div>
  );
}
